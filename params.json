{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Let's do something useful with my diabetes data","google":"UA-20895204-9","name":"Insulin","body":"What's this?\r\n============\r\n\r\nWell I was recently diagnosed with Type-1 Diabetes. I've been collecting lots of data related to my condiiton using [OnTrack](https://play.google.com/store/apps/details?id=com.gexperts.ontrack), and wanted to do more interesting things with it. Hence this.\r\n\r\nFor now all it does is ingest a CSV file, parse it into some nice JSON, and stuff it into MongoDB.\r\n\r\nInstall\r\n=======\r\n\r\n    gem install insulin\r\n\r\nAlso requires MongoDB. Instructions for installing Mongo on Ubuntu are [here](http://docs.mongodb.org/manual/tutorial/install-mongodb-on-debian-or-ubuntu-linux/).\r\n\r\nUsage\r\n=====\r\n\r\nTo suck in some data\r\n\r\n    insulin ingest </path/to/on_track_export_file.csv>\r\n\r\nThis will take that file, parse it, and push the JSON into a number of collections in a MongoDB database called 'insulin'. You can view them with something like\r\n\r\n    $ mongo insulin\r\n    MongoDB shell version: 2.0.6\r\n    connecting to: insulin\r\n    > db.events.find({serial : 266})\r\n    { \"_id\" : ObjectId(\"4ff07b371508cc259c8a8f0c\"), \"serial\" : 266, \"timestamp\" : ISODate(\"2012-06-28T09:21:05Z\"), \"tzoffset\" : \"+0100\", \"timezone\" : \"BST\", \"unixtime\" : 1340875265, \"day\" : \"thursday\", \"date\" : \"2012-06-28\", \"time\" : \"10:21:05 BST\", \"type\" : \"medication\", \"subtype\" : \"humalog\", \"tag\" : \"breakfast\", \"value\" : 4, \"notes\" : { \"food\" : [ \"2 bacon\", \"2 toast\" ], \"note\" : [ \"test note\" ] } }\r\n    > \r\n\r\nCurrent output options are\r\n\r\n    insulin day DATE\r\n    insulin month DATE\r\n    insulin week DATE\r\n\r\nExample:\r\n\r\n    $ insulin day 2012-07-01\r\n    2012-07-01\r\n        09:41:47 BST | breakfast       | glucose    |               |  6.4 mmol/L\r\n        09:57:09 BST | breakfast       | medication | humalog       |  4.0 x10^-5 L\r\n        12:40:43 BST | lunch           | weight     |               | 59.0 kg\r\n        13:54:04 BST | lunch           | glucose    |               |  5.0 mmol/L\r\n        14:03:05 BST | lunch           | medication | humalog       |  4.0 x10^-5 L\r\n        18:56:25 BST | dinner          | glucose    |               |  4.9 mmol/L\r\n        19:03:37 BST | dinner          | medication | humalog       |  6.0 x10^-5 L\r\n        21:06:01 BST | after dinner    | glucose    |               |  3.5 mmol/L\r\n        22:32:32 BST | bedtime         | glucose    |               |  7.5 mmol/L\r\n        22:46:12 BST | bedtime         | medication | lantus        | 14.0 x10^-5 L\r\n\r\n        average glucose: 5.46 mmol/L\r\n\r\nA weekly PDF summary can be generated and mailed out\r\n\r\n    insulin pdf you@yourdmomain.com\r\n\r\nThe PDF class is currently a bit hacky, I'm still learning the excellent [prawn gem](https://github.com/prawnpdf/prawn). Requires a local SMTP server, too\r\n\r\nYou can also run the tests, if you're into that sort of thing:\r\n\r\n    bundle exec rspec\r\n\r\nPostfix setup\r\n=============\r\n\r\nOnTrack allows you to mail the exported CSV files to an email address. [This page](http://tech.jeffri.es/2010/09/automatic-ripping-and-saving-email-attachments-with-postfix/) explains how to configure Postfix to extract those files. I now have this set up so that I mail from OnTrack to particular_address@mydomain.com, the CSVs get dropped into a directory, and then 'insulin ingest' runs periodically on the newest file in that directory.\r\n\r\nNext steps\r\n==========\r\n\r\n* Generate custom CSVs for spreadsheeting\r\n* Do some analysis\r\n* Generate some more detailed output (latest HbA1c, BP, etc)\r\n* Give it a [meteor](http://meteor.com/) front-end (might require some help from [Chris](https://github.com/mrchrisadams)). Graphs, yo\r\n* Connect to the Google Drive API to pull the exported CSVs (OnTrack will push there) and push spreadsheetable CSVs\r\n* Possibly connect to [this API](http://platform.fatsecret.com/api/) to extract carb values from plain-text food descriptions (this may be a little ambitious, we'll see)\r\n\r\n---\r\n\r\nProject built using DDD (Diabetes-Driven Development)\r\n"}